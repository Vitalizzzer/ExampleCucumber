"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path="../types/intrinsicElements.d.ts" />
/// <reference path="../types/unistTestLine.d.ts" />
var jsxFactory_1 = require("./jsxFactory");
/**
 * Replace variables in text
 * @param text - text to replace variables in
 * @param variables - array of configuration variables
 */
exports.replaceVariables = function (text, variables) {
    return text.replace(/<%([a-zA-Z0-9_]{1,20})%>/g, function (wholeMatch, varName) { var _a, _b; return _b = (_a = variables.find(function (variable) { return variable.key === varName; })) === null || _a === void 0 ? void 0 : _a.value, (_b !== null && _b !== void 0 ? _b : wholeMatch); });
};
/**
 * Replace variables and format the output to display both replaced and not replaced strings
 */
exports.formatVariables = function (text, variables) {
    var resultText = exports.replaceVariables(text, variables);
    if (resultText !== text) {
        // There was some replacing done
        return jsxFactory_1.jsx("fragment", null,
            jsxFactory_1.jsx("bold", null, resultText),
            " (",
            jsxFactory_1.jsx("code", null, text),
            ")");
    }
    return jsxFactory_1.jsx("bold", null, text);
};
/**
 * Replace variable and output timeout value as unist node
 */
exports.formatTimeout = function (timeout, variables) {
    // Replace variables (if any) in timeout
    var t = typeof timeout === 'string' ? exports.replaceVariables(timeout, variables) : String(timeout);
    // Get final value in ms as a number
    var ms = +t;
    if (isNaN(ms)) {
        // Wrong variable or other invalid value
        // Just display it as is
        return jsxFactory_1.jsx("bold", null, String(timeout));
    }
    // Value to display to user, as string, in seconds
    var s = String(ms / 1000) + 's';
    if (String(timeout) !== t) {
        // Variable is used
        return jsxFactory_1.jsx("fragment", null,
            jsxFactory_1.jsx("bold", null, s),
            " (",
            jsxFactory_1.jsx("code", null, String(timeout)),
            ")");
    }
    // Not a variable
    return jsxFactory_1.jsx("bold", null, s);
};
exports.formatCount = function (count, variables) {
    var countAsString = String(count);
    var countAsStringWithReplacedVars = typeof count === 'string' ? exports.replaceVariables(count, variables) : countAsString;
    // Get final value in ms as a number
    var countAsNumberWithReplacedVars = +countAsStringWithReplacedVars;
    if (isNaN(countAsNumberWithReplacedVars)) {
        // Wrong variable or other invalid value
        // Just display it as is
        return jsxFactory_1.jsx("bold", null, countAsString);
    }
    if (countAsString !== countAsStringWithReplacedVars) {
        // Variable is used
        return jsxFactory_1.jsx("fragment", null,
            jsxFactory_1.jsx("bold", null, countAsStringWithReplacedVars),
            "x (",
            jsxFactory_1.jsx("code", null, countAsString),
            ")");
    }
    // Not a variable
    return jsxFactory_1.jsx("fragment", null,
        jsxFactory_1.jsx("bold", null, countAsString),
        "x");
};
exports.escapeHtml = function (text) { return text.replace(/[&<"']/g, function (m) {
    switch (m) {
        case '&':
            return '&amp;';
        case '<':
            return '&lt;';
        case '"':
            return '&quot;';
        default:
            return '&#039;';
    }
}); };
//# sourceMappingURL=utils.js.map