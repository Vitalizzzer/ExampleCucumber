"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./constants");
var texts_1 = __importDefault(require("./texts"));
/**
 * @description Translate the reason for test not being executed
 * @throws {Error} Throws an Error if unknown code is provided
 */
function translateNotStartedReason(code) {
    switch (code) {
        case constants_1.NOT_STARTED_REASON.BLASTER_ERROR:
            return {
                title: texts_1.default['startupError.blasterError'](),
                description: texts_1.default['startupError.blasterError.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.PLATFORM_ERROR_BOOTSTRAP:
            return {
                title: texts_1.default['startupError.bootstrappedPlatformError'](),
                description: texts_1.default['startupError.bootstrappedPlatformError.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.TEST_QUEUED:
            return {
                title: texts_1.default['startupError.testQueued'](),
                description: texts_1.default['startupError.testQueued.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.NO_AUTOMATED_MINUTES:
            return {
                title: texts_1.default['startupError.noAvailableAutomatedMinutes'](),
                description: texts_1.default['startupError.noAvailableAutomatedMinutes.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.NO_ACTIVE_PLAN:
            return {
                title: texts_1.default['startupError.noActivePlan'](),
                description: texts_1.default['startupError.noActivePlan.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.CANDYBOX_OFFLINE:
            return {
                title: texts_1.default['startupError.candyBoxOffline'](),
                description: texts_1.default['startupError.candyBoxOffline.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.SUITEST_DRIVE_OFFLINE:
            return {
                title: texts_1.default['startupError.suitestDriveOffline'](),
                description: texts_1.default['startupError.suitestDriveOffline.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.SUITEST_DRIVE_SERVICE_OFFLINE:
            return {
                title: texts_1.default['startupError.suitestDriveServiceOffline'](),
                description: '',
            };
        case constants_1.NOT_STARTED_REASON.BOOTING:
            return {
                title: texts_1.default['startupError.runningBootSequence'](),
                description: texts_1.default['startupError.runningBootSequence.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.DEVICE_IN_USE:
            return {
                title: texts_1.default['startupError.deviceInUse'](),
                description: texts_1.default['startupError.deviceInUse.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.DEVICE_DISABLED:
            return {
                title: texts_1.default['startupError.deviceDisabled'](),
                description: texts_1.default['startupError.deviceDisabled.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.DEVICE_DELETED:
            return {
                title: texts_1.default['startupError.deviceDeleted'](),
                description: texts_1.default['startupError.deviceDeleted.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.INTERNAL_ERROR:
            return {
                title: texts_1.default['startupError.internalError'](),
                description: texts_1.default['startupError.internalError.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.PLATFORM_ERROR_UNDEFINED:
            return {
                title: texts_1.default['startupError.notDefinedPlatform'](),
                description: texts_1.default['startupError.notDefinedPlatform.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.PLATFORM_ERROR_LG_WEBOS:
            return {
                title: texts_1.default['startupError.lgWebosPlatformError'](),
                description: texts_1.default['startupError.lgWebosPlatformError.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.PLATFORM_ERROR_XBOX:
            return {
                title: texts_1.default['startupError.xboxPlatformError'](),
                description: texts_1.default['startupError.xboxPlatformError.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.PLATFORM_ERROR_ANDROID:
            return {
                title: texts_1.default['startupError.androidPlatformError'](),
                description: texts_1.default['startupError.androidPlatformError.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.PLATFORM_ERROR_APPLE_TV:
            return {
                title: texts_1.default['startupError.applePlatformError'](),
                description: texts_1.default['startupError.applePlatformError.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.PLATFORM_ERROR_ROKU:
            return {
                title: texts_1.default['startupError.rokuPlatformError'](),
                description: texts_1.default['startupError.rokuPlatformError.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.EXCEEDED_PLAN_LIMITS:
            return {
                title: texts_1.default['startupError.planLimitExceeded'](),
                description: texts_1.default['startupError.planLimitExceeded.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.PLATFORM_ERROR_PLAYSTATION:
            return {
                title: texts_1.default['startupError.playstationPlatformError'](),
                description: texts_1.default['startupError.playstationPlatformError.desc'](),
            };
        case constants_1.NOT_STARTED_REASON.PACKAGE_CORRUPTED:
            return {
                title: texts_1.default['startupError.packageCorrupted'](),
                description: '',
            };
        case constants_1.NOT_STARTED_REASON.CONFIGURATOR_ERROR:
            return {
                title: texts_1.default['startupError.configuratorError'](),
                description: texts_1.default['startupError.configuratorError.desc'](),
            };
        default:
            var _code = code;
            throw new Error(texts_1.default['startupError.unknownReason'](_code));
    }
}
exports.translateNotStartedReason = translateNotStartedReason;
//# sourceMappingURL=notStartedReason.js.map