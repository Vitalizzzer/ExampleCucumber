"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var texts_1 = __importDefault(require("./texts"));
var constants_1 = require("./constants");
var notStartedReason_1 = require("./notStartedReason");
/**
 * @description Get humanized progress status explanation result
 * @throws {Error} Throws an Error if unknown status is provided or code is required and missing
 */
function translateProgress(message) {
    if ('code' in message && message.code !== undefined) {
        return notStartedReason_1.translateNotStartedReason(message.code);
    }
    if (message.status === undefined) {
        throw new Error(texts_1.default['progress.status.undefined']());
    }
    switch (message.status) {
        case constants_1.PROGRESS_STATUS.OPENING_APP: return { title: texts_1.default['progress.status.openingApp']() };
        case constants_1.PROGRESS_STATUS.CLOSING_APP: return { title: texts_1.default['progress.status.closingApp']() };
        case constants_1.PROGRESS_STATUS.BOOTING_DEVICE: return { title: texts_1.default['progress.status.bootingDevice']() };
        case constants_1.PROGRESS_STATUS.WAIT_FOR_MANUAL_ACTION: return { title: texts_1.default['progress.status.needManual']() };
        case constants_1.PROGRESS_STATUS.DEVICE_IDENTIFICATION: return { title: texts_1.default['progress.status.recoveringID']() };
        case constants_1.PROGRESS_STATUS.WAITING_FOR_BOOTSTRAP: return { title: texts_1.default['progress.status.waitingForConnectionFromBootstrap']() };
        case constants_1.PROGRESS_STATUS.WAITING_FOR_IL: return { title: texts_1.default['progress.status.waitingForConnectionFromIL']() };
        case constants_1.PROGRESS_STATUS.APP_UNINSTALL: return { title: texts_1.default['progress.status.unistallingApp']() };
        case constants_1.PROGRESS_STATUS.APP_UPLOAD_INSTALL: return { title: texts_1.default['progress.status.uploadingAndInstallingApp']() };
        case constants_1.PROGRESS_STATUS.NOTHING: return { title: '' };
        case constants_1.PROGRESS_STATUS.ACTION_FAILED: return { title: '' };
        default:
            var _status = message.status;
            throw new Error(texts_1.default['progress.status.unknownStatusCode'](_status));
    }
}
exports.translateProgress = translateProgress;
//# sourceMappingURL=progress.js.map