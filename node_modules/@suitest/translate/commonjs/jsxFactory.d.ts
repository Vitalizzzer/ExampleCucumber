/// <reference path="../types/intrinsicElements.d.ts" />
/// <reference path="../types/unistTestLine.d.ts" />
declare type DeepArrayOrOne<T> = T | Array<T | DeepArrayOrOne<T>>;
export declare const flatten: <T extends any>(input: DeepArrayOrOne<T>) => T[];
export declare const assertUnknownSectionNode: (node: never) => never;
export declare const assertUnknownTextNode: (node: never) => never;
/**
 * A factory for JSX elements. Maps React-style JSX to unist-style nodes.
 * "any" is used for children and props because TypeScript can't infer JSX element types
 * anyway and always returns whatever is provided in JSX.Element type/interface.
 * Some validation is added to ensure correct data at least runtime.
 */
export declare const jsx: (type: "bold" | "text" | "emphasis" | "code" | "paragraph" | "cell" | "row" | "table" | "dictionary" | "code-block" | "test-line" | "condition" | "fragment", props: {
    [key: string]: any;
} | null, ...children: (string | PlainTextNode | BoldTextNode | EmphasisTextNode | CodeTextNode | ParagraphNode | CellNode | RowNode | TableNode | DictionaryNode | CodeBlockNode | ConditionNode | TestLineNode | SingleNode[])[]) => Node;
export {};
