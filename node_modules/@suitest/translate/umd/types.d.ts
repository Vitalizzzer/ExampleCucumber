export declare type LineDefinition = TestLineDefinitionType;
export declare type LineResult = {
    lineId: string;
    result: 'success' | 'warning' | 'fail' | 'fatal' | 'exit';
    timeFinished?: number;
    timeStarted?: number;
    timeHrDiff?: number[];
    errorType?: string;
    message?: {
        code?: string;
        info?: {
            reason?: string;
            buttonIds?: string[];
            error?: string;
            exception?: string;
        };
    };
    actualValue?: string;
    expression?: Array<{
        result: string;
        actualValue?: string;
        errorType?: string;
        message?: {
            code?: string;
        };
    }>;
    errors?: NetworkError[];
    snippetLineId?: string;
    snippetLineNumber?: number | null;
    results?: LineResult[];
    loopResults?: LineResult[];
};
export declare type AppConfiguration = {
    configVariables: string[];
};
export declare type Options = {
    config: AppConfiguration;
};
export declare type FormattedString = string;
export declare type Comparator = PropertyStringComparatorsType | PropertyNumericComparatorsType | PropertyColorComparatorsType | PropertySpecificComparatorsType | PropertyEqualComparatorType;
export declare type LineResultDetail = {
    prop: FormattedString;
    actual: number | FormattedString | null;
    expected: number | FormattedString | null;
    expectedDefault: boolean;
    comparator: Comparator;
};
export declare type Translation = {
    title: FormattedString;
    description?: FormattedString;
};
export declare type LineResultTranslated = {
    title: FormattedString;
    description?: FormattedString;
    details: LineResultDetail[];
};
export declare type NetworkError = {
    actualValue: string;
    name: string;
    message: 'response' | 'request';
    reason: 'notMatched';
    type: 'header' | 'noUriFound' | 'status';
};
declare type TestLineDefinitionType = TestLineButtonType | TestLineOpenAppType | TestLineOpenUrlType | TestLineSleepType | TestLineClearAppDataType | TestLineExecCmdType | TestLineExecBRSCmdType | TestLineRunSnippetType | TestLineCommentType | TestLinePollUrlType | TestLineAssertType | TestLineWaitType | TestLineBrowserCommandType | TestLineSendTextType | TestLineSetTextType | TestLineClickType | TestLineMoveToType;
declare type TestLineType = {
    lineId: string;
    excluded: boolean;
    fatal: boolean;
    screenshot: boolean;
};
export declare type TestLineTypes = 'assert' | 'button' | 'runSnippet' | 'wait' | 'pollUrl' | 'sleep' | 'clearAppData' | 'execCmd' | 'execBRSCmd' | 'openApp' | 'openUrl' | 'comment' | 'browserCommand' | 'sendText' | 'setText' | 'click' | 'moveTo';
declare type BrowserCommandTypes = 'goBack' | 'goForward' | 'refresh' | 'setWindowSize' | 'dismissAlertMessage' | 'acceptAlertMessage' | 'acceptPromptMessage';
declare type TestLineButtonType = TestLineType & {
    type: 'button';
    ids?: string[];
    count?: number;
    delay?: number;
    condition?: AssertConditionType;
    negateCondition?: boolean;
};
declare type TestLineOpenAppType = TestLineType & {
    type: 'openApp';
    relativeUrl?: string;
};
declare type TestLineOpenUrlType = TestLineType & {
    type: 'openUrl';
    url?: string;
};
declare type TestLineSleepType = TestLineType & {
    type: 'sleep';
    timeout: number | string | null;
};
declare type TestLineClearAppDataType = TestLineType & {
    type: 'clearAppData';
};
declare type TestLineExecCmdType = TestLineType & {
    type: 'execCmd';
    val?: string;
};
declare type TestLineExecBRSCmdType = TestLineType & {
    type: 'execBRSCmd';
    val?: string;
};
declare type TestLineRunSnippetType = TestLineType & {
    type: 'runSnippet';
    val?: string;
    count: number;
    condition?: AssertConditionType;
    negateCondition?: boolean;
};
declare type TestLineCommentType = TestLineType & {
    type: 'comment';
    val?: string;
};
declare type TestLinePollUrlType = TestLineType & {
    type: 'pollUrl';
    url?: string;
    response?: string;
};
declare type AssertResultType = 'success' | 'warning' | 'fail' | 'exit';
export declare type TestLineAssertType = TestLineType & {
    type: 'assert';
    condition: AssertConditionType;
    then: AssertResultType;
};
export declare type TestLineWaitType = TestLineType & {
    type: 'wait';
    timeout: number;
    condition: AssertConditionType;
    then: AssertResultType;
};
declare type TestLineSendTextType = TestLineType & {
    type: 'sendText';
    target: BrowserCommandElementTargetType;
    val: string;
    condition?: AssertConditionType;
    negateCondition?: true;
    count: number;
    delay: number;
};
declare type TestLineSetTextType = TestLineType & {
    type: 'setText';
    target: SetTextTargetType;
    val: string;
    condition?: AssertConditionType;
    negateCondition?: true;
};
declare type TestLineClickType = TestLineType & {
    type: 'click';
    target: BrowserCommandElementTargetType | BrowserCommandWindowTargetType;
    condition?: AssertConditionType;
    negateCondition?: true;
    count: number;
    delay: number;
};
declare type TestLineMoveToType = TestLineType & {
    type: 'moveTo';
    target: BrowserCommandElementTargetType | BrowserCommandWindowTargetType;
    condition?: AssertConditionType;
    negateCondition?: true;
};
declare type TestLineBrowserCommandType = TestLineType & {
    type: 'browserCommand';
    browserCommand: {
        type: BrowserCommandTypes | '';
        params: {
            width?: number | null;
            height?: number | null;
            text?: string | null;
        };
    };
    condition?: AssertConditionType;
    negateCondition?: true;
};
declare type BrowserCommandElementTargetType = {
    type: 'element' | 'window';
    name?: string;
    elementId?: string;
};
declare type BrowserCommandWindowTargetType = {
    type: 'window';
    coordinates: {
        x?: number;
        y?: number;
    };
};
declare type SetTextTargetType = {
    type: 'element';
    name?: string;
    elementId?: string;
};
export declare type AssertConditionType = AssertConditionElementType | AssertConditionVideoType | AssertConditionLocationType | AssertConditionCookieType | AssertConditionJavaScriptType | AssertConditionBrightScriptType | AssertConditionNetworkType | AssertConditionApplicationType | AssertConditionVideoType | AssertConditionPlayStationVideoType;
declare type StringComparatorsType = '=' | '!=' | '~' | '!~' | '^' | '$';
declare type MatchComparatorsType = 'matches';
declare type ExistComparatorType = 'exists' | '!exists';
declare type AssertConditionLocationType = {
    subject: {
        type: 'location';
    };
    type: StringComparatorsType;
    val?: string;
};
declare type AssertConditionCookieType = {
    subject: {
        type: 'cookie';
        val?: string;
    };
    type: StringComparatorsType | MatchComparatorsType | ExistComparatorType;
    val?: string;
};
declare type AssertConditionJavaScriptType = {
    subject: {
        type: 'javascript';
        val?: string;
    };
    type: StringComparatorsType;
    val?: string;
};
declare type AssertConditionBrightScriptType = {
    subject: {
        type: 'brightscript';
        val?: string;
    };
    type: StringComparatorsType;
    val?: string;
};
export declare type AssertConditionNetworkType = {
    subject: {
        type: 'network';
        val?: string;
        compare: '=' | '~';
        requestInfo: Array<InfoBodyType | InfoMethodType | InfoHeaderType>;
        responseInfo: Array<InfoBodyType | InfoStatusType | InfoHeaderType>;
    };
    type: 'made';
    searchStrategy: 'all' | 'notMatched';
};
declare type InfoBodyType = {
    name: '@body';
    val?: string;
    compare: '=';
    uid: string;
};
declare type InfoStatusType = {
    name: '@status';
    val?: string;
    compare: PropertyNumericComparatorsType;
    uid: string;
};
declare type InfoMethodType = {
    name: '@method';
    val?: string;
    compare: PropertyStringComparatorsType;
    uid: string;
};
declare type InfoHeaderType = {
    name?: string;
    val?: string;
    compare: PropertyStringComparatorsType | PropertyNumericComparatorsType;
    uid: string;
};
declare type AssertConditionApplicationType = {
    subject: {
        type: 'application';
    };
    type: 'exited';
};
export declare type AssertConditionElementType = {
    subject: {
        type: 'element';
        name?: string;
        flag?: number;
        elementId: string;
    };
    expression: Array<NumericProperties | StringProperties | BooleanProperties | ColorProperties | ImageHashProperty | BorderStyleProperty | VisibilityProperty | ContentModeProperty | StateProperty | TextAlignmentProperty | ImageLoadStateProperty>;
    type: 'has' | 'exists' | '!exists' | 'matches' | 'matchesBRS';
    val?: string;
};
export declare type AssertConditionVideoType = {
    subject: {
        type: 'video';
        name?: string;
        flag?: number;
    };
    expression: Array<NumericProperties | StringProperties | BooleanProperties | ColorProperties | ImageHashProperty | VideoStateProperty | BorderStyleProperty | VisibilityProperty | ContentModeProperty | StateProperty | TextAlignmentProperty>;
    type: 'has' | 'exists' | '!exists' | 'matches' | 'matchesBRS';
    val?: string;
};
declare type AssertConditionPlayStationVideoType = PlayStationHasCondition | PlayStationHadErrorCondition;
declare type PlayStationHasCondition = {
    subject: {
        type: 'psVideo';
    };
    expression: Array<VideoStateProperty | VideoPosProperty | VideoLengthProperty | VideoUrlProperty>;
    type: 'has';
};
declare type PlayStationHadErrorCondition = {
    subject: {
        type: 'psVideo';
    };
    type: 'hadNoError';
    searchStrategy: 'all' | 'currentUrl';
};
declare type PropertyStringComparatorsType = '=' | '!=' | '~' | '!~' | '^' | '!^' | '$' | '!$';
declare type PropertyNumericComparatorsType = '=' | '+-' | '!=' | '>' | '>=' | '<' | '<=';
declare type PropertyColorComparatorsType = '=' | '!=' | '+-';
declare type PropertySpecificComparatorsType = '=' | '!=';
declare type PropertyEqualComparatorType = '=';
export declare type AllElementProperties = NumericProperties['property'] | StringProperties['property'] | BooleanProperties['property'] | ColorProperties['property'] | ImageHashProperty['property'] | VideoStateProperty['property'] | BorderStyleProperty['property'] | VisibilityProperty['property'] | ContentModeProperty['property'] | StateProperty['property'] | TextAlignmentProperty['property'] | ImageLoadStateProperty['property'];
declare type BasePropertyType<TProp, TType, TVal = string> = {
    property: TProp;
    type: TType;
    val?: TVal;
    uid: string;
    inherited?: boolean;
};
declare type ZIndexProperty = BasePropertyType<'zIndex', PropertyNumericComparatorsType, number>;
declare type OpacityProperty = BasePropertyType<'opacity', PropertyNumericComparatorsType, number>;
declare type BorderWidthProperty = BasePropertyType<'borderWidth', PropertyNumericComparatorsType, number>;
declare type TopProperty = BasePropertyType<'top', PropertyNumericComparatorsType, number>;
declare type LeftProperty = BasePropertyType<'left', PropertyNumericComparatorsType, number>;
declare type WidthProperty = BasePropertyType<'width', PropertyNumericComparatorsType, number>;
declare type HeightProperty = BasePropertyType<'height', PropertyNumericComparatorsType, number>;
declare type VideoPosProperty = BasePropertyType<'videoPos', PropertyNumericComparatorsType, number>;
declare type VideoLengthProperty = BasePropertyType<'videoLength', PropertyNumericComparatorsType, number>;
declare type ItemFocusedProperty = BasePropertyType<'itemFocused', PropertyNumericComparatorsType, number>;
declare type MarginProperty = BasePropertyType<'margin', PropertyNumericComparatorsType, number>;
declare type PaddingProperty = BasePropertyType<'padding', PropertyNumericComparatorsType, number>;
declare type FontSizeProperty = BasePropertyType<'fontSize', PropertyNumericComparatorsType, number>;
declare type FontWeightProperty = BasePropertyType<'fontWeight', PropertyNumericComparatorsType, number>;
declare type FocusMarginProperty = BasePropertyType<'focusMargin', PropertyNumericComparatorsType, number>;
declare type FocusPrimaryWidthProperty = BasePropertyType<'focusPrimaryWidth', PropertyNumericComparatorsType, number>;
declare type FocusSecondaryWidthProperty = BasePropertyType<'focusSecondaryWidth', PropertyNumericComparatorsType, number>;
declare type TextSizeProperty = BasePropertyType<'textSize', PropertyNumericComparatorsType, number>;
declare type ScaleXProperty = BasePropertyType<'scaleX', PropertyNumericComparatorsType, number>;
declare type ScaleYProperty = BasePropertyType<'scaleY', PropertyNumericComparatorsType, number>;
declare type TranslationXProperty = BasePropertyType<'translationX', PropertyNumericComparatorsType, number>;
declare type TranslationYProperty = BasePropertyType<'translationY', PropertyNumericComparatorsType, number>;
declare type PivotXProperty = BasePropertyType<'pivotX', PropertyNumericComparatorsType, number>;
declare type PivotYProperty = BasePropertyType<'pivotY', PropertyNumericComparatorsType, number>;
declare type TagIntProperty = BasePropertyType<'tagInt', PropertyNumericComparatorsType, number>;
declare type NumberOfSegmentsProperty = BasePropertyType<'numberOfSegments', PropertyNumericComparatorsType, number>;
declare type LeftAbsoluteProperty = BasePropertyType<'leftAbsolute', PropertyNumericComparatorsType, number>;
declare type TopAbsoluteProperty = BasePropertyType<'topAbsolute', PropertyNumericComparatorsType, number>;
declare type NumericProperties = ZIndexProperty | OpacityProperty | BorderWidthProperty | TopProperty | LeftProperty | WidthProperty | HeightProperty | VideoPosProperty | VideoLengthProperty | ItemFocusedProperty | MarginProperty | PaddingProperty | FontSizeProperty | FontWeightProperty | FocusMarginProperty | FocusPrimaryWidthProperty | FocusSecondaryWidthProperty | TextSizeProperty | ScaleXProperty | ScaleYProperty | TranslationXProperty | TranslationYProperty | PivotXProperty | PivotYProperty | TagIntProperty | NumberOfSegmentsProperty | LeftAbsoluteProperty | TopAbsoluteProperty;
declare type TextProperty = BasePropertyType<'text', PropertyStringComparatorsType, string>;
declare type ImageProperty = BasePropertyType<'image', PropertyStringComparatorsType, string>;
declare type IdProperty = BasePropertyType<'id', PropertyStringComparatorsType, string>;
declare type ClassProperty = BasePropertyType<'class', PropertyStringComparatorsType, string>;
declare type HrefProperty = BasePropertyType<'href', PropertyStringComparatorsType, string>;
declare type VideoUrlProperty = BasePropertyType<'videoUrl', PropertyStringComparatorsType, string>;
declare type FontFamilyProperty = BasePropertyType<'fontFamily', PropertyStringComparatorsType, string>;
declare type NameProperty = BasePropertyType<'name', PropertyStringComparatorsType, string>;
declare type AutomationNameProperty = BasePropertyType<'automationName', PropertyStringComparatorsType, string>;
declare type AutomationIdProperty = BasePropertyType<'automationId', PropertyStringComparatorsType, string>;
declare type AlphaProperty = BasePropertyType<'alpha', PropertyStringComparatorsType, string>;
declare type TagProperty = BasePropertyType<'tag', PropertyStringComparatorsType, string>;
declare type ContentDescriptionProperty = BasePropertyType<'contentDescription', PropertyStringComparatorsType, string>;
declare type HintProperty = BasePropertyType<'hint', PropertyStringComparatorsType, string>;
declare type PackageNameProperty = BasePropertyType<'packageName', PropertyStringComparatorsType, string>;
declare type AccessibilityIdentifierProperty = BasePropertyType<'accessibilityIdentifier', PropertyStringComparatorsType, string>;
declare type FontNameProperty = BasePropertyType<'fontName', PropertyStringComparatorsType, string>;
declare type FontURIProperty = BasePropertyType<'fontURI', PropertyStringComparatorsType, string>;
declare type PlaceholderProperty = BasePropertyType<'placeholder', PropertyStringComparatorsType, string>;
declare type ProposalURLProperty = BasePropertyType<'proposalURL', PropertyStringComparatorsType, string>;
declare type UrlProperty = BasePropertyType<'url', PropertyStringComparatorsType, string>;
declare type ValueProperty = BasePropertyType<'value', PropertyStringComparatorsType, string>;
declare type StringProperties = TextProperty | ImageProperty | IdProperty | ClassProperty | HrefProperty | VideoUrlProperty | FontFamilyProperty | NameProperty | AutomationNameProperty | AutomationIdProperty | AlphaProperty | TagProperty | ContentDescriptionProperty | HintProperty | PackageNameProperty | AccessibilityIdentifierProperty | FontNameProperty | FontURIProperty | PlaceholderProperty | ProposalURLProperty | UrlProperty | ValueProperty;
declare type IsCompletelyDisplayedProperty = BasePropertyType<'isCompletelyDisplayed', PropertyEqualComparatorType, boolean>;
declare type IsEnabledProperty = BasePropertyType<'isEnabled', PropertyEqualComparatorType, boolean>;
declare type HasFocusProperty = BasePropertyType<'hasFocus', PropertyEqualComparatorType, boolean>;
declare type IsClickableProperty = BasePropertyType<'isClickable', PropertyEqualComparatorType, boolean>;
declare type IsCheckedProperty = BasePropertyType<'isChecked', PropertyEqualComparatorType, boolean>;
declare type IsSelectedProperty = BasePropertyType<'isSelected', PropertyEqualComparatorType, boolean>;
declare type IsFocusableProperty = BasePropertyType<'isFocusable', PropertyEqualComparatorType, boolean>;
declare type IsTouchableProperty = BasePropertyType<'isTouchable', PropertyEqualComparatorType, boolean>;
declare type HasMetaDataProperty = BasePropertyType<'hasMetaData', PropertyEqualComparatorType, boolean>;
declare type HasNavMarkersProperty = BasePropertyType<'hasNavMarkers', PropertyEqualComparatorType, boolean>;
declare type IsOpaqueProperty = BasePropertyType<'isOpaque', PropertyEqualComparatorType, boolean>;
declare type IsFocusedProperty = BasePropertyType<'isFocused', PropertyEqualComparatorType, boolean>;
declare type BooleanProperties = IsCompletelyDisplayedProperty | IsEnabledProperty | HasFocusProperty | IsClickableProperty | IsCheckedProperty | IsSelectedProperty | IsFocusableProperty | IsTouchableProperty | HasMetaDataProperty | HasNavMarkersProperty | IsOpaqueProperty | IsFocusedProperty;
declare type BackgroundColorProperty = BasePropertyType<'backgroundColor', PropertyColorComparatorsType, string>;
declare type ColorProperty = BasePropertyType<'color', PropertyColorComparatorsType, string>;
declare type BorderColorProperty = BasePropertyType<'borderColor', PropertyColorComparatorsType, string>;
declare type FocusPrimaryColorProperty = BasePropertyType<'focusPrimaryColor', PropertyColorComparatorsType, string>;
declare type FocusSecondaryColorProperty = BasePropertyType<'focusSecondaryColor', PropertyColorComparatorsType, string>;
declare type BarTintColorProperty = BasePropertyType<'barTintColor', PropertyColorComparatorsType, string>;
declare type SelectedImageTintColorProperty = BasePropertyType<'selectedImageTintColor', PropertyColorComparatorsType, string>;
declare type TintColorProperty = BasePropertyType<'tintColor', PropertyColorComparatorsType, string>;
declare type ColorProperties = BackgroundColorProperty | ColorProperty | BorderColorProperty | FocusPrimaryColorProperty | FocusSecondaryColorProperty | BarTintColorProperty | SelectedImageTintColorProperty | TintColorProperty;
declare type ImageHashProperty = BasePropertyType<'imageHash', PropertySpecificComparatorsType, string>;
declare type VideoStateProperty = BasePropertyType<'videoState', PropertySpecificComparatorsType, VideoStatesDefaultType | VideoStatesAndroidType | VideoStatesTvOSType>;
declare type VideoStatesDefaultType = 'stopped' | 'playing' | 'paused' | 'connecting' | 'buffering' | 'finished' | 'error';
declare type VideoStatesAndroidType = 'error' | 'idle' | 'preparing' | 'prepared' | 'playing' | 'paused' | 'playback_completed' | 'unknown';
declare type VideoStatesTvOSType = 'finished' | 'paused' | 'reversing' | 'playing' | 'error' | 'buffering' | 'undefined';
declare type BorderStyleTvOSType = 'none' | 'bezel' | 'rectangle' | 'rounded';
declare type BorderStyleProperty = BasePropertyType<'borderStyle', PropertyEqualComparatorType, BorderStyleTvOSType>;
declare type VisibilityProperty = BasePropertyType<'visibility', PropertyEqualComparatorType, VisibilityXboxType | VisibilityAndroidType | VisibilityRokuType>;
declare type VisibilityXboxType = 'visible' | 'collapsed';
declare type VisibilityAndroidType = 'visible' | 'invisible' | 'collapsed';
declare type VisibilityRokuType = 'visible' | 'invisible';
declare type ContentModeProperty = BasePropertyType<'contentMode', PropertyEqualComparatorType, ContentModesType>;
declare type ContentModesType = 'scaleToFill' | 'scaleAspectFit' | 'scaleAspectFill' | 'redraw' | 'center' | 'top' | 'bottom' | 'bottomLeft' | 'bottomRight' | 'left' | 'right' | 'topLeft' | 'topRight';
declare type StateProperty = BasePropertyType<'state', PropertyEqualComparatorType, ElementStatesTvOSType>;
declare type ElementStatesTvOSType = 'selected' | 'highlighted' | 'disabled' | 'normal' | 'application' | 'focused' | 'reserved';
declare type TextAlignmentProperty = BasePropertyType<'textAlignment', PropertyEqualComparatorType, TextAlignmentTvOSType>;
declare type TextAlignmentTvOSType = 'center' | 'justified' | 'left' | 'right' | 'natural';
declare type ImageLoadStateProperty = BasePropertyType<'imageLoadState', PropertyEqualComparatorType, ImageLoadStateHtmlBased>;
declare type ImageLoadStateHtmlBased = 'loaded' | 'loading' | 'error' | 'unknown' | '';
export {};
